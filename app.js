//external dependencies
const express = require("express");
const path = require("path");
const http = require("http");
const socketIo = require("socket.io");

//internal dependencies
const indexRouter = require("./routes");

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

let waitingUsers = [];
let rooms = {};

io.on("connection", (socket) => {
  socket.on("joinroom", function () {
    if (waitingUsers.length) {
      let partner = waitingUsers[0];
      waitingUsers.shift();
      // The room name is generated by concatenating the IDs of the two users
      // who are going to be in the room. This ensures that the room name is
      // unique to the two users, and that two users can never be in the same
      // room twice.
      const roomName = `${socket.id}-${partner.id}`;
      // The join method is used to make the socket join the room. This is
      // necessary because the socket is not yet part of any room when it
      // first connects.
      socket.join(roomName);
      // The join method is also used to make the partner socket join the
      // same room. This is necessary because the partner socket is not yet
      // part of any room when it first connects.
      partner.join(roomName);

      // The to method is used to emit an event to all the sockets in the
      // room. This is necessary to notify both users that they are now in the
      // same room.
      io.to(roomName).emit("joined", roomName);
    } else {
      waitingUsers.push(socket);
    }
  });

  // This code listens for a message event from a socket. When a message is
  // received, it is broadcast to all the other sockets in the same room.
  // The message is an object that contains the message itself, as well as the
  // room name that the message is intended for.
  // The broadcast method is used to send the message to all the other sockets
  // in the same room. The to method is used to specify the room that the
  // message should be sent to.
  socket.on("message", function (message) {
    // This line emits the message event to all the sockets in the same room
    // as the socket that sent the message.
    socket.broadcast.to(message.room).emit("message", message);
  });

  socket.on("signalingMessage", function (data) {
    socket.broadcast.to(data.room).emit("signalingMessage", data.message);
  });

  socket.on("startVideoCall", function ({ room }) {
    socket.broadcast.to(room).emit("incomingCall");
  });

  socket.on("acceptCall", function ({ room }) {
    socket.broadcast.to(room).emit("callAccepted");
  });

  socket.on("rejectCall", function ({ room }) {
    socket.broadcast.to(room).emit("callRejected");
  });

  socket.on("disconnect", function () {
    let index = waitingUsers.findIndex(
      (waitingUser) => waitingUser.id === socket.id
    );

    if (index !== -1) {
      waitingUsers.splice(index, 1);
    }
  });
});

app.use("/", indexRouter);
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, "public"))); // Serve static files from public directory
app.set("view engine", "ejs");

server.listen(process.env.PORT || 3000, () => {
  console.log(`Server is running on port ${process.env.PORT}`);
});
